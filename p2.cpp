/***********************************************
* Title:        Project Euleur Problem 2: Even Fibonacci Numbers
* Author:       Dawson Whipple
* Date:         3/27/24
* Description:  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
*               By starting with and 1, 2 the first 10 terms will be: 
*               1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
*               By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
*               find the sum of the even-valued terms.
************************************************/
//Notes:
//Initially tried a recursive solution but determined non-recursive was easier and more time/space efficient
//C++
#include <iostream>
using std::cout;

//finds the sum of all even numbers in the fibonnaci sequence up to max
int fibonnaciEvenSum(int max){
    int n = 1;
    int k = 2;
    int sum = 0;

    while(n < max){
        //testing 
        //cout << "n: "<< n << " k: " << k << '\n';

        //only sums the even values
        if(n%2 == 0)
            sum += n;
        k = n+k;
        n = k-n;
    }
    return sum;
}

int main(){
    cout << fibonnaciEvenSum(90) << '\n';
    cout << "Expected Fibonnaci output for max = 90: " << (1+2+3+5+8+13+21+34+55+89) << '\n';
    cout << "Expected sum of even Fibonnaci values for max = 90: " << (2+8+34) << '\n';
    cout << "Even Fibonnaci sums for max = 4,000,000: " << fibonnaciEvenSum(4000000) << '\n';
    return 0;
}

